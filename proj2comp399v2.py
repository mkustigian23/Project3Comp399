# -*- coding: utf-8 -*-
"""Proj2Comp399V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ZilXjQf6aPV3D9lOFx68XYkCcAe9UOV
"""

import yfinance as yf
import re
from google.colab import userdata
# from transformers import AutoTokenizer, AutoModelForCausalLM
from huggingface_hub import login
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import pandas as pd
import torch


def fetch_stock_data(ticker, start_date, end_date):
    """Fetch historical stock data from Yahoo Finance."""
    stock_data = yf.download(ticker, start=start_date, end=end_date)
    return stock_data


def load_model():
    """Load LLM model of choice."""
    tokenizer = AutoTokenizer.from_pretrained("google/flan-t5-small", use_auth_token = False)
    model = AutoModelForSeq2SeqLM.from_pretrained("google/flan-t5-small", use_auth_token = False)

    return tokenizer, model


def predict_stock_price(tokenizer, model, stock_data, ticker):
    """Use GPT 2 to predict the next closing price based on historical data."""
    recent_data = stock_data.tail(5)[['Open']].copy()
    formatted_data = recent_data.to_string(index=False)

    # Format the prompt
    tomorrow = (pd.to_datetime('today').date() + pd.Timedelta(days=1)).isoformat()
    input_text = (
    f"Based on the past 5 days of stock prices shown for {ticker} that is shown in formatted data variable:\n\n"
    f"{formatted_data}\n\n"
    f"What is the predicted opening price for {ticker} on {tomorrow}?\n"
    f"Respond with only a single number that you think will be the opening price for {ticker}."
    )

    # Debug print
    print("Prompt:\n", input_text)

    # Tokenize and predict
    device = next(model.parameters()).device
    inputs = tokenizer(input_text, return_tensors="pt").to(device)

    with torch.no_grad():
      outputs = model.generate(**inputs, max_length=30)

    prediction = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # Extract numerical value robustly
    match = re.search(r'\d+\.\d+|\d+', prediction)
    predicted_price = float(match.group()) if match else None

    # Display result
    print("Predicted Price:", predicted_price)

    if match:
        predicted_price = float(match.group(0))
        return predicted_price
    else:
        return "No numerical prediction found."
    return prediction


def main():
    ticker = "AAPL"  # Change to any stock symbol, for the example here I used Apple as it is one of the most well known stocks.
    start_date = "2025-05-03"
    end_date = "2025-05-08"

    print(f"Fetching stock data for {ticker}...")
    stock_data = fetch_stock_data(ticker, start_date, end_date)

    print("Loading LLM model...")
    tokenizer, model = load_model()

    print("Predicting stock price...")
    prediction = predict_stock_price(tokenizer, model, stock_data, ticker)

    print(f"Predicted next opening price for {ticker}: {prediction}")


if __name__ == "__main__":
    main()